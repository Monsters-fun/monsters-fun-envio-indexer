type Monster {
    id: ID! # Token Address
    name: String!
    symbol: String!
    supply: BigDecimal! # Supply in ETH
    price: BigDecimal!
    PriceSnapShot: [PriceSnapShot!]! @derivedFrom(field: "monster")
    marketCap: BigDecimal!
    marketCapSnapshots: [MarketCapSnapshot!]! @derivedFrom(field: "monster")
    totalVolumeTraded: BigDecimal! # total ethAmount of all buy / sells / trades in ETH
    totalVolumeTradedSnapshots: [TotalVolumeTradedSnapshot!]! @derivedFrom(field: "monster")
    trades: [Trade!]! @derivedFrom(field: "monster")
    depositsTotal: BigDecimal! # total ethAmount of all trades where isBuy in ETH
    withdrawalsTotal: BigDecimal! # total ethAmount of all trades where !isBuy in ETH
    experiencePoints: BigDecimal! 
    battleOutcomes: [BattleOutcome!]! @derivedFrom(field: "monster")
    totalWinsCount: Int! # total wins
    totalLossesCount: Int! # total losses
    winLoseRatio: Float! # wins / (wins + losses)    
    holdings: [CurrentHoldings!]! @derivedFrom(field: "monster")
    isInBattle: Boolean! # true if there is a battle in progress
    activeOpponent: String # address of the opponent in the current battle
    contractOwner: String! # address of the owner of the monster contract
    paused: Boolean! # true if the monster is paused
}

type PriceSnapShot {
    id: ID! # txHash-logIndex
    monster: String!
    timestamp: BigInt! @index
    price: BigDecimal!
}


type MarketCapSnapshot {
    id: ID! # txHash-logIndex
    monster: String! @index
    timestamp: BigInt! @index
    supply: BigDecimal! # Supply in ETH
    price: BigDecimal!
    marketCap: BigDecimal! 
}

type TotalVolumeTradedSnapshot {
    id: ID! # txHash-logIndex
    monster: String! @index
    timestamp: BigInt! @index    
    totalVolumeTraded: BigDecimal! # Volume in ETH
}

type BattleOutcome {
    id: ID! # txHash-logIndex
    monster: String! @index
    win: Boolean! 
    opponent: String! @index
    transferredValue: BigDecimal! @index # Value in ETH
    timestamp: BigInt! @index
}

enum TradeType {
    BUY
    SELL
    TRANSFER_IN
    TRANSFER_OUT
}

type Trade {
    id: ID! # txHash-logIndex-trader
    txHash: String! 
    logIndexTransfer: Int!
    logIndexTrade: Int!
    monster: String! 
    trader: String! @index
    tradeType: TradeType!
    amount: BigDecimal! @index # Token amount in ETH
    ethAmount: BigDecimal! @index # ETH amount in ETH
    blockTimestamp: BigInt! @index # Timestamp for 24-hour queries
    blockNumber: BigInt! 
}

type Trader {
    id: ID! # Account Address
    trades: [Trade!]! @derivedFrom(field: "trader")
    numberOfTrades: Int!
    holdings: [CurrentHoldings!]! @derivedFrom(field: "trader")        
    holdingsSnapshots: [HoldingsSnapshot!]! @derivedFrom(field: "trader")
    whitelistPurchaseSnapshots: [WhitelistPurchaseSnapshot!]! @derivedFrom(field: "trader")
    points: BigDecimal! # Points (can be decimal for more precision)
}

type CurrentHoldings {
    id: ID! # monster-trader
    monster: Monster! @index
    trader: String! @index
    balance: BigDecimal! # Balance in ETH
    lastTradePrice: BigDecimal!
    lastTradeMarketCap: BigDecimal!
    totalHoldingsCost: BigDecimal!
    totalHoldingsSales: BigDecimal!
}

type HoldingsSnapshot {
    id: ID! # txHash-logIndex
    monster: Monster! @index
    price: BigDecimal!
    trader: String! @index
    balance: BigDecimal! # Balance in ETH
    marketCap: BigDecimal!
    timestamp: Int! @index
}

type WhitelistPurchaseSnapshot {
    id: ID! # txHash-logIndex
    monster: Monster! @index    
    trader: String! @index    
    timestamp: Int! @index
    ethAmountPurchased: BigDecimal! # Amount in ETH
}

type GlobalStats {
    id: ID! # 'global'
    protocolFees: BigDecimal! # Fees in ETH
}

# ================================
# NFTStaking contract entities
# ================================

# Individual stake representing a single staked NFT
type ActiveStake @entity {
  id: ID! # tokenId
  nftId: String! # tokenId as string
  owner: String! @index # Address of the NFT owner
  stakeTimestamp: BigDecimal! # Unix timestamp when staked
}

# Staker entity for real-time point calculations
type Staker @entity {
  id: ID! # Staker address
  stakerId: String! @index # Staker address (redundant for queries)
  
  # Real-time calculation fields
  pointsAtLastUpdate: BigDecimal! @index # Points balance at last event
  currentPointsPerSecond: BigDecimal! @index # Current earning rate
  lastUpdateTimestamp: BigDecimal! # Unix timestamp of last update
  
  # Bonus system
  bonusTier: Int! @index # Bonus tier: 0 (no bonus), 1 (2+ NFTs), 2 (5+ NFTs), 3 (10+ NFTs)
  
  # Active stakes list
  activeStakes: [ActiveStake!]! @derivedFrom(field: "owner")
  activeStakesCount: Int! @index # Number of currently staked NFTs
  
  # Statistics
  totalStakesCount: Int! # All-time number of stakes
}

# Event log for historical tracking (needed for forfeiture calculations)
type StakingEvent @entity {
  id: ID! # eventId (txHash-logIndex)
  eventId: String! # Same as id
  stakerId: String! @index # Staker address
  eventType: String! # 'STAKE' or 'UNSTAKE'
  nftId: String! # tokenId as string
  timestamp: BigDecimal! # Unix timestamp
  blockNumber: BigInt! # Block number for ordering
  transactionHash: String! # Transaction hash
}

# ================================
# MonsterCapsule contract entities
# ================================

type Capsule @entity {
  id: ID! # tokenId
  tokenId: BigInt!
  capsuleType: String! # The single trait for the capsule
  owner: CapsuleHolder! # The current owner
  ownerAddress: String! @index # Direct access to owner address (lowercase)
  isStaked: Boolean! # True if the capsule is currently staked
}

type CapsuleHolder @entity {
  id: ID! # address of the user
  capsules: [Capsule!]! @derivedFrom(field: "owner")
  
  # Capsule counts
  totalCapsules: Int! # Total capsules owned
  stakedCapsules: Int! # Capsules currently staked
  # unstakedCapsules can be calculated as: totalCapsules - stakedCapsules
}