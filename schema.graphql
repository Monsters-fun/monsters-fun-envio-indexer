type Monster {
    id: ID! # Token Address
    name: String!
    symbol: String!
    supply: BigInt!
    price: BigDecimal!
    marketCap: BigDecimal!
    marketCapSnapshots: [MarketCapSnapshot!]! @derivedFrom(field: "monster")
    totalVolumeTraded: BigInt! # total ethAmount of all buy / sells / trades
    totalVolumeTradedSnapshots: [TotalVolumeTradedSnapshot!]! @derivedFrom(field: "monster")
    trades: [Trade!]! @derivedFrom(field: "monster")
    depositsTotal: BigInt! # total ethAmount of all trades where isBuy
    withdrawalsTotal: BigInt! # total ethAmount of all trades where !isBuy
    experiencePoints: BigDecimal! 
    battleOutcomes: [BattleOutome!]! @derivedFrom(field: "monster")
    totalWinsCount: Int! # total wins
    totalLossesCount: Int! # total losses
    winLoseRatio: Float! # wins / (wins + losses)    
    holdings: [CurrentHoldings!]! @derivedFrom(field: "monster")
}

type MarketCapSnapshot {
    id: ID! # txHash-logIndex
    monster: String! @index
    timestamp: BigInt! @index
    supply: BigInt!
    price: BigDecimal!
    marketCap: BigDecimal! 
}

type TotalVolumeTradedSnapshot {
    id: ID! # txHash-logIndex
    monster: String! @index
    timestamp: BigInt! @index    
    totalVolumeTraded: BigInt! 
}

type BattleOutome {
    id: ID! # txHash-logIndex
    monster: String! @index
    win: Boolean! 
    timestamp: BigInt! @index
}

enum TradeType {
    BUY
    SELL
    TRANSFER_IN
    TRANSFER_OUT
}

type Trade {
    id: ID! # txHash-logIndex
    txHash: String! 
    logIndexTransfer: Int!
    logIndexTrade: Int!
    monster: String! 
    trader: String! @index
    tradeType: TradeType!
    amount: BigInt! @index
    ethAmount: BigInt! @index
    blockTimestamp: BigInt! @index # Timestamp for 24-hour Data Queries # todo: make this an Int
    blockNumber: BigInt! 
}

type Trader {
    id: ID! # Account Address
    trades: [Trade!]! @derivedFrom(field: "trader")
    numberOfTrades: Int!
    holdings: [CurrentHoldings!]! @derivedFrom(field: "trader")        
    holdingsSnapshots: [HoldingsSnapshot!]! @derivedFrom(field: "trader")
    points: BigInt! # in 10^18    
}

type CurrentHoldings {
    id: ID! # monster-trader
    monster: Monster! @index
    trader: String! @index
    balance: BigInt!
    lastTradePrice: BigDecimal!
    lastTradeMarketCap: BigDecimal!
    totalHoldingsCost: BigDecimal!
    totalHoldingsSales: BigDecimal!
}

type HoldingsSnapshot {
    id: ID! # txHash-logIndex
    monster: Monster! @index
    price: BigDecimal!
    trader: String! @index
    balance: BigInt!
    marketCap: BigDecimal!
    timestamp: Int! @index
}